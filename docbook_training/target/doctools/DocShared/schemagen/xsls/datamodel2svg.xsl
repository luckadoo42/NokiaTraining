<?xml version="1.0" ?>
<!DOCTYPE xsl:stylesheet[
<!ENTITY do.not.edit "	<xsl:comment>
	  This file is automatically generated. Do not edit!
	</xsl:comment>">
]>
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
	xmlns:bj="http://motive.com/techpubs/datamodel" 
	xmlns:lookup="http://www.broadjump.com/lookup"
	xmlns:svg = "http://www.w3.org/2000/svg"
	xmlns:db="http://docbook.org/ns/docbook"
	xmlns:xlink="http://www.w3.org/1999/xlink"
    exclude-result-prefixes="lookup db bj">
	
	<!-- 
  -->

  <xsl:output 	
	indent="yes"/>
  
  <!--
  This stylesheet converts a datamodel file
  to an SVG ER diagram   
  -->

<!-- Some global values 	-->
	<xsl:param name="LINEWEIGHT">2</xsl:param>

<!-- We're going to create a grid with empty spaces between the spaces that can hold tables;
	these interstitial spaces will be sized by the following values. 
	They will be called 'spacers'.
	
-->
	<xsl:param name="SPACERMARGIN">3</xsl:param> <!-- pixels of margin in spacers -->
	<xsl:param name="NUMLANES">3</xsl:param> <!-- number of line lanes to allow space for, in the spacers -->
	<!-- SPACERSIZE is side of a square spacer, or min hor or vert spacing btw tables;
		it is calculated as (lineweight*3) for each lane, so that a lane can have a line in the center
		and some space around that; then 2*margin (for margin on each side). -->
		
	<xsl:param name="SPACERSIZE"><xsl:value-of select="$LINEWEIGHT * 3 * $NUMLANES + $SPACERMARGIN * 2"/></xsl:param>

    <xsl:param name="MINTABLEWIDTH">220</xsl:param>
	<xsl:param name="COLWIDTH"><xsl:value-of select="$MINTABLEWIDTH + $SPACERSIZE"/></xsl:param>
	<xsl:param name="TEXTHEIGHT">15</xsl:param>
	<xsl:param name="CHARWIDTH">5</xsl:param>
	<xsl:param name="NUMTABLES"><xsl:value-of select="count(//bj:table)"/></xsl:param>
<!-- i wanted to do gridsize as square root of #tables (int of that +1 or more)... but, no sqroot function ?
	<xsl:value-of select="int(sqrt($NUMTABLES)) + 1"/> throws err -->
	<xsl:param name="GRIDSIZE">10</xsl:param>


   <!--  PRIORITY sorts tables to determine which ones should be placed in the 
   	diagram first. -->
   <xsl:variable name="PRIORITY">
   	  <!-- put the most connected tables first, determined by how many times a table
   	  		is mentioned in foreignKey values. 
   	  		with our sample data...the winner should be ... DEVICE.
   	  
   	  ok, so we need an expression of that. Um, i suppose we could do another prepass,
   	  where we calculate number-of-times-mentioned....
   	  well, ok, what's the expression for that?
   	  # of tables  whose foreignkey containst the current table's name?
   	  count(//bj:format[substring-before(@foreignKey,'.') = current()/@name])
   	  
   	  this seems to work ok
   	  -->
   	  <xsl:for-each select="//bj:table">
   	  	<xsl:sort order='descending' select = "count(//bj:format[substring-before(@foreignKey,'.') = current()/@name])"/>
   	  	<tablepos>
   	  		<xsl:attribute name="name">
   	  			<xsl:value-of select="@name"/>
   	  		</xsl:attribute>
   	  	</tablepos>
   	  </xsl:for-each>
   </xsl:variable>


    <!-- GRIDARRAY determines where to put each table, in the abstract grid that makes up our 
    	diagram, represented by X and Y coordinates 
    
    note the position < 4 below: arbitrarily limiting my drawing to 4 tables for now.
    
    -->
	<xsl:variable name="GRIDARRAY">
		<xsl:for-each select="$PRIORITY/tablepos[position() &lt; 5 ]">
			<tableloc>
				<xsl:attribute name="name"><xsl:value-of select="@name"/></xsl:attribute>
				<x><xsl:value-of select="position()"/></x>
				<y><xsl:value-of select="position()"/></y>
			</tableloc>
		</xsl:for-each>
	</xsl:variable>
	


<!-- Ok, so, first thing we want to do is process all the <table> elements
	in the source. We don't really care about anything else. -->
	
   <!-- start processing ... -->
 	<xsl:template match="/"> 
 		
 		
 		
 		<svg:svg xmlns="http://www.w3.org/2000/svg" 
 			xmlns:xlink="http://www.w3.org/1999/xlink"
 			id="canvas" 
 			width="1000" 
 			height="1000"
 			onload="init()">
<!-- 			width="2000" 
 			height="2000" -->
 			
 			<xsl:comment>
 				Some parameter values used in this file were:
 				LINEWEIGHT = <xsl:value-of select="$LINEWEIGHT"/>
 				SPACERMARGIN = <xsl:value-of select="$SPACERMARGIN"/>
 				NUMLANES = <xsl:value-of select="$NUMLANES"/>
 				SPACERSIZE = <xsl:value-of select="$SPACERSIZE"/>
 				MINTABLEWIDTH = <xsl:value-of select="$MINTABLEWIDTH"/>
 				COLWIDTH = <xsl:value-of select="$COLWIDTH"/>
 				NUMTABLES = <xsl:value-of select="$NUMTABLES"/>
 				GRIDSIZE =  <xsl:value-of select="$GRIDSIZE"/>
 				
 		 GRIDARRAY = 
 				<xsl:for-each select="$GRIDARRAY/tableloc">
 					x = <xsl:value-of select="x"/>, y = <xsl:value-of select="y"/>
 				</xsl:for-each> 
 				
 				Testing access:
 				- X and Y of 5th table: <xsl:value-of select="$GRIDARRAY/tableloc[5]"/>
 				- X and Y of table BULK_IMPORT_JOB: <xsl:value-of select="$GRIDARRAY/tableloc[@name = 'BULK_IMPORT_JOB']"/> 
 		 		
 		 		PRIORITY = 
 		 		  <xsl:for-each select="$PRIORITY/tablepos">
 		 		  	  <xsl:value-of select="position()"/> = <xsl:value-of select="@name"/>
 		 		  </xsl:for-each>
 		 				
 		 				
 			</xsl:comment>
          <xsl:text>
          	
          	
          	
          </xsl:text> 			
 			<!-- testing arbitrary links: red circle is a link-->
 			<svg:a xlink:href="http://www.starshipmodeler.com">
 				<svg:circle cx="120" cy="70" r ="20" fill="red"/></svg:a>
 			
 			
 			<xsl:apply-templates/>
 		</svg:svg>
 
	</xsl:template>

    <!-- For all elements not handled by other templates, output nothing -->
	<xsl:template match="*"/>

 
 	
 <xsl:template match="bj:subsystem">
 	

 
 
 <xsl:for-each select="$GRIDARRAY/tableloc">
 	<!--  Not sure we need $X, $Y, since we just call a template to get 'em-->
 	<xsl:variable name="X"><xsl:call-template name="gimmeX"/></xsl:variable>
 	<xsl:variable name="Y"><xsl:call-template name="gimmeY"/></xsl:variable>
 	<xsl:variable name="WIDTH"><xsl:value-of select="$MINTABLEWIDTH"/></xsl:variable>
 	<xsl:variable name="HEIGHT"><xsl:value-of select="$MINTABLEWIDTH"/></xsl:variable> 	
 
<xsl:text>
	
</xsl:text>
 	 <xsl:comment>Table <xsl:value-of select="@name"/></xsl:comment>
 	<svg:a> <!-- link to table's page -->
  		<xsl:attribute name="xlink:href">../<xsl:value-of select="@name"/>.html</xsl:attribute>
 		
  	 <svg:rect>
    	 	<xsl:attribute name="x"><xsl:value-of select="$X"/></xsl:attribute>
    	 	<xsl:attribute name="y"><xsl:value-of select="$Y"/></xsl:attribute>
    	 	<xsl:attribute name="width"><xsl:value-of select="$WIDTH"/></xsl:attribute>
    	 	<xsl:attribute name="height"><xsl:value-of select="$HEIGHT"/></xsl:attribute>
    	 	<xsl:attribute name="stroke">black</xsl:attribute>
    	 	<xsl:attribute name="stroke-width"><xsl:value-of select="$LINEWEIGHT"/></xsl:attribute>
  	 	<xsl:attribute name="fill">white</xsl:attribute>   	 	
  	 </svg:rect> </svg:a>

 	<!--- set up base text x and y vars -->
 	<xsl:variable name="textX"><xsl:value-of select="$X + $LINEWEIGHT + $SPACERMARGIN"/></xsl:variable>
 	<xsl:variable name="textY"><xsl:value-of select="$Y + $TEXTHEIGHT + $LINEWEIGHT+ $SPACERMARGIN"/></xsl:variable>
 	
 			<svg:text>
 	 	<xsl:attribute name="x"><xsl:value-of select="$textX"/></xsl:attribute>
 	 	<xsl:attribute name="y"><xsl:value-of select="$textY"/></xsl:attribute>
 	 	<xsl:value-of select="@name"/>
 	 	<!-- list foreign keys -->
 	 	<xsl:for-each select="bj:column/bj:format[@foreignKey]">
 	 		<xsl:text>
</xsl:text>
 	 		<svg:tspan>
 	 			<xsl:attribute name="x"><xsl:value-of select="$textX"/></xsl:attribute>
 	 			<xsl:attribute name="y"><xsl:value-of select="$textY + position() * ($TEXTHEIGHT + $LINEWEIGHT)"/></xsl:attribute>
 	 			<xsl:value-of select="@foreignKey"/>
 	 		</svg:tspan>
 	 	</xsl:for-each>
 	</svg:text>
 		
	
  	 </xsl:for-each>

  </xsl:template>


<xsl:template name="gimmeX"> <!-- calculates X from grid position -->
	<xsl:value-of select="$GRIDARRAY/tableloc[@name = current()/@name]/x * $COLWIDTH + $SPACERSIZE"/>
</xsl:template>
	
<xsl:template name="gimmeY"> <!-- calculates Y from grid position -->
	<xsl:value-of select="$GRIDARRAY/tableloc[@name = current()/@name]/y * $COLWIDTH + $SPACERSIZE"/>
</xsl:template>

</xsl:stylesheet>
