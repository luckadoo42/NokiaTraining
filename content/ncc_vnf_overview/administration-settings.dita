<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="id9YZ-09018-UG00-PCZZA-d1e12669"><title>Administration settings</title><conbody>
<section><title>Overview</title>
<p>An operator can manage the operators and their roles using the <uicontrol>SM Operators</uicontrol> and <uicontrol>Role and Access Control</uicontrol> options available in the <uicontrol>ADMINISTRATION</uicontrol> tab on the SM GUI.</p>
</section>
<section><title>Operator management</title>
<p>The operator roles, authentication and authorization of an operator can be managed using the <uicontrol>SM Operators</uicontrol> on the SM GUI.</p>
<p>The following operator roles are supported:</p><ul>
<li>
<p>
<uicontrol>Administrator</uicontrol>: The administrator role is a system-defined role created at the time of SM installation. A default operator, <i>smadmin</i> is created after the successful installation of SM. By default, the administrator role is assigned to it. The administrator role is assigned the system security domain and any user who gets assigned with this role can access all the features in the SM application. No other operator-defined roles can be assigned with the system security domain which is a reserved keyword.</p>
<p>
<uicontrol>Note:</uicontrol> Security domain is an ID value for grouping permissions at the user level, where permission refers to the action values (read, write, create, and delete) on SM objects. The default <i>smadmin</i> user cannot be modified or deleted.</p>
</li>
<li>
<p>
<uicontrol>Operator-defined roles</uicontrol>: Operator-defined roles are created by SM users with the create configuration permissions to regulate access to MEs, administration, throttling configuration in the SM GUI.</p>
</li>
</ul>
<p>The operator authentication and authorization related details are as follows:</p><ul>
<li>
<p>
<uicontrol>Authentication</uicontrol>: An operator enters a valid username and password in the log in screen to authenticate access to SM. If a user enters an invalid username or password or both, then the user is notified with an error message on the GUI:</p>
<p>
<codeph>Invalid&lt;username/password&gt;</codeph> with 401 response code.</p>
<p>The 401 response code indicate that the user authentications details are provided but they failed authorization tests.</p>
<p>When a user receives the authentication error message, the user must check with the administrator for a valid username and password to access SM.</p>
</li>
<li>
<p>
<uicontrol>Authorization</uicontrol>: The role assigned to a user authorizes access to MEs. If a role is not authorized with the access to specific objects on the SM GUI, the user is notified with the following error message:</p>
<p>
<codeph>User is not authorized to access the requested resource</codeph> with 401 response code.</p>
<p>When a user receives the authorization error message, the operator must assign the user with a role that allows access to the required objects on SM. </p>
</li>
</ul>
</section>
<section><title>Role management</title>
<p>An SM operator can either be assigned an administrator role or a operator-defined role. The administrator role is a system-defined role created at the time of SM installation. The user-defined roles are created by SM operators with create configuration permissions.</p>
<p>A Security Domain (SD) is an ID that contains objects and permissions assigned to each object. Each provisioned object in SM is tagged with a security domain ID. Each SM operator is associated with a set of security domains and within each security domain, operator is assigned permissions to perform certain actions on specific SM entities. The object type or permissions can be assigned inside an SD that cannot be independently created or modified.</p>
<p>Security domain is not an object, but an ID tag for grouping permissions at the operator level and as a reference at the object level. Each role can be assigned multiple security domains.</p>
<p>Once the permissions are assigned to users through security domains, SM checks each incoming API request for user's permissions. The request is rejected if the user does not have sufficient permission.</p>
</section>
</conbody></concept>