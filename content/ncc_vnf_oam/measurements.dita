<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="id9yz-09126-mt00-rezza-sp2-d1e3355"><title>Measurements</title><conbody>
<section><title>Overview</title>
<p>NCC collects a broad range of measurements to provide a rich set of data for understanding the
        load and behavior of the system and its network integration. Network operators can leverage
        these metrics to monitor the system’s behavior, as well as for engineering analysis of the
        system’s processing and capacity. The metrics are available to examine on the NCC itself and
        can also be retrieved by external systems for offboard analysis.</p>
<p>See the following for information about:</p><ul>
<li>
<p><xref href="#id9yz-09126-mt00-rezza-sp2-d1e3355/meascollection" format="dita"/>
          </p>
</li>
<li>
<p><xref href="#id9yz-09126-mt00-rezza-sp2-d1e3355/measstructnlabel" format="dita"/>
          </p>
</li>
<li>
<p><xref href="#id9yz-09126-mt00-rezza-sp2-d1e3355/measreteivstor" format="dita"/>
          </p>
</li>
<li>
<p><xref href="#id9yz-09126-mt00-rezza-sp2-d1e3355/csvfiledep" format="dita"/>
          </p>
</li>
</ul>
<p>NCC measurement pegging and collection are performed by Prometheus, a widely used third-party
        metrics and monitoring software package that is integrated in the Nokia Common Software
        Foundation (CSF).</p>
<p>The following Prometheus components are used in NCC for platform metrics:</p><ul>
<li>
<p>Prometheus server: to scrape and store time series data.</p>
</li>
<li>
<p>Client libraries: for instrumenting application code.</p>
</li>
<li>
<p>Node Exporter: used to collect the default set of system metrics. Nodes are scraped for default metrics in 60 second intervals and stored on the OAME in the /appdata/cpro/prometheus directory.</p>
</li>
<li>
<p>Grafana: to allow for data visualization with multiple modes of graphing and dashboarding support</p>
</li>
<li>
<p>Alertmanager: to handle alerts</p>
</li>
<li>
<p>Pushgateway: configured on both OAME nodes at port 9091, for supporting short-lived jobs; for example:</p>
<p>
<userinput>http://&lt;OAM IP&gt;:9091</userinput>
</p>
<p>The Prometheus Pushgateway exists to allow ephemeral and batch jobs to expose their metrics to Prometheus. These kinds of jobs may not exist long enough to be scraped, so they can instead push their metrics to a Pushgateway. The Pushgateway then exposes these metrics to Prometheus. See <xref format="html" href="https://github.com/prometheus/pushgateway/blob/master/readme.md" scope="external">https://github.com/prometheus/pushgateway/blob/master/README.md</xref> for more information.</p>
</li>
<li>
<p>Gen3GPPXML: generates 3GPP XML file according to the customized metric set, the metric value is retrieved from the Prometheus server through its REST API</p>
</li>
</ul>
<p>The NCC measurements system includes the popular and powerful Grafana third-party platform for
        querying and visualizing the NCC metrics stored in Prometheus. Grafana includes built-in
        Prometheus support with features that include a query editor with metric name lookup and
        templating queries for generic dashboards. See <!--xref URI: #Gstartrafana--><xref
          href="metconfig.dita#id9yz-09126-mt00-rezza-sp2-metconfig/Gstartrafana"/> for a high level
        description of getting started with Grafana in NCC.</p>
<p>NCC is also capable of generating alarms when a given metric has exceeded a configured threshold.
        The configuration data controls which metrics, at what thresholds, have what alert
        severities. For example, a minor alarm could be generated if the CPU usage exceeds 70% and a
        major alert could be generated if the CPU usage exceeds 80% or at 90% for a critical alert.
        See <!--xref URI: #alarmthreshold--><xref
          href="metconfig.dita#id9yz-09126-mt00-rezza-sp2-metconfig/alarmthreshold"/> for a high
        level description of generating alarms when a given metric has exceeded a configured
        threshold in NCC.</p>
<note>During start-up of the Prometheus server the following error messages may be seen for
        fluentd.json and targets.json. These error messages can be ignored safely:<p>
          <systemoutput>2019-03-11T02:06:23.028455-04:00 sps-ig-oame-1 prometheus: level=error
            ts=2019-03-11T06:06:23.027727507Z caller=file.go:321 component="discovery manager
            scrape" discovery=file msg="Error reading file" path=/etc/prometheus/targets.json
            err="unexpected end of JSON input" </systemoutput>
        </p><p>
          <systemoutput>2019-03-11T02:06:23.031810-04:00 sps-ig-oame-1 prometheus: level=error
            ts=2019-03-11T06:06:23.03151083Z caller=file.go:321 component="discovery manager scrape"
            discovery=file msg="Error reading file" path=/etc/prometheus/targets.json
            err="unexpected end of JSON input"  </systemoutput>
        </p><p>
          <systemoutput>2019-03-11T02:06:23.036042-04:00 sps-ig-oame-1 prometheus: level=error
            ts=2019-03-11T06:06:23.035759661Z caller=file.go:321 </systemoutput>
        </p><p>
          <systemoutput>2019-03-16T15:43:25.992017-04:00 confd: 2019-03-16T15:43:25-04:00
            sps-ig-smapp-0 /usr/bin/confd[5093]: ERROR open
            /etc/prometheus/tmp/.targets_tmp837727793: no such file or directory
            sps-ig-smapp-1</systemoutput>
        </p><p>
          <systemoutput>2019-03-16T15:43:17.363668-04:00 confd: 2019-03-16T15:43:17-04:00
            sps-ig-smapp-1 /usr/bin/confd[5075]: ERROR open
            /etc/prometheus/tmp/.targets_tmp448163492: no such file or directory.</systemoutput>
        </p></note>
</section>
<section id="meascollection"><title>Measurement collection</title>
<p>Metrics are gathered onto the central OAME nodes in each NCC, where the Prometheus server and
        database are located. Both OAME nodes run the Prometheus server and both actively collect
        measurement data from the clients and store the data in their own local databases, such that
        all measurements data continues to be available following an OAME switchover. A Prometheus
        client runs on all the nodes that are recording metrics to be collected by the Prometheus
        server on the OAME.</p>
<p>Prometheus provides a multi-dimensional data model with time series data identified by metric name and key/value pairs. A flexible query language is supported for retrieving data from the database. Prometheus GUI queries should be executed on OAME standby node.</p>
<p>The Prometheus GUI can be accessed at:</p>
<p>
<userinput>http://&lt;OAM IP&gt;:9090</userinput>
</p>
<p>For more details about Prometheus, its configuration, tools, and features, please refer to information found on the internet.</p>
</section>
<section id="measstructnlabel"><title>Measurement Structure and Optional Labels</title>
<p>NCC measurements are structured with an object model that consolidates a rich set of information
        into a small number of measurements. This is achieved by virtue of adding labels to the
        measurements that provide several more levels of detail. For example, there is a single
        Diameter Inbound Count measurement, but there are labels for recording the Application (Gx,
        Gy, Sy, etc.), the Command (CCR, AAR, RAR, etc.), the RequestType (Initial Request, Update
        Request, etc.), Result code (Diameter Success, Diameter Limited Success, etc.), as well as
        information about the peer host and realm. </p>
<p>With this wealth of data, users can then examine the NCC measurements from a variety of
        dimensions to gain a detailed understanding of the system traffic and behavior. Questions
        such as the following can be answered:</p><ul>
<li>
<p>How many Diameter requests succeeded or failed?</p>
</li>
<li>
<p>How many CCR requests failed?</p>
</li>
<li>
<p>How many CCR requests failed from a given Diameter realm?</p>
</li>
</ul>
<p>In addition, some measurements are defined with a Custom Label. This provides an open-ended way of recording additional data in AVPs, with multiple AVPs able to be stored as a single Custom Label.</p>
</section>
<section id="measreteivstor"><title>Storage and Retrieval of Measurements in 3GPP XML files</title>
<p>Each NCC SM and ME system periodically (for example, every 5 minutes) retrieves measurements data
        from Prometheus and records it into 3GPP XML files that are then made available for
        northbound OSS systems to retrieve by SFTP. This is achieved via the Gen3GPPPXML script that
        is called from the /usr/local/etc/Gen3GPPXML.json file.</p>
<p>See the <i>NCC Installation and Upgrade Guide</i> for information about configuring the key
        parameter values required for the Gen3GPPXML file.</p>
<p>Gen3GPPXML creates measurements files on the OAME nodes and stores them in the /appdata directory
        with a path that depends on the version of NetAct being used. (See the <i>NCC Installation
          and Upgrade Guide</i> for information about the correct path to the Gen3GPPXML file by
        version of NetAct.) These files are available to be retrieved and processed by northbound
        OSS systems, including Nokia NetAct. </p>
<p>The files are named as follows:</p>
<p>
<systemoutput>&lt;date&gt;.&lt;starttime&gt;-&lt;endtime&gt;_&lt;sitename&gt;-&lt;nodename&gt;</systemoutput>
</p>
<p>where:</p>
<p>
<systemoutput>&lt;date&gt; = YYYYMMDD</systemoutput>
</p>
<p>
<systemoutput>&lt;starttime&gt; = HHMMZ (where Z is a timezone for example, -0700)</systemoutput>
</p>
<p>
<systemoutput>&lt;endtime&gt; = HHMMZ (where Z is a timezone for example, -0700)</systemoutput>
</p>
<p>
<systemoutput>&lt;sitename&gt; = The name given to the SPS site.</systemoutput>
</p>
<p>
<systemoutput>&lt;nodename&gt; = The node name or VM name in SPS that recorded the measurement.</systemoutput>
</p>
<p>For example:  <systemoutput>A20190131.1800+0000-1805+0000_sps-me-1-diameterapp-13</systemoutput>
</p>
<p>Gen3GPPXML generates one XML file for one node by default. The node name is appended to the filename. If the postFix is set with an non-empty value all the measurement data for all the nodes is written into one XML file, then “gen3gppxmlDefaultPostFix” is appended to the filename; for example: </p>
<p>A20181226.1849+0000-1850+0000_gen3gppxmlDefaultPostFix</p>
<p>Inside the XML file, there are indicators for the end time of the collection interval and the duration of that interval, in seconds. There may be multiple measurements in each group, with their names and measurement values clearly indicated</p>
<p>There is a separate XML entry for each combination of metric values recorded during this interval. If a “Last Interval” type metric value (for example, diameter_inbound_average_latency_last_interval) has not changed during the last interval, it will not appear in the XML file. Metric values for other metrics are continually recorded in the XML file.</p>
<p>The following shows an example format within the XML files. Each metric has many labels but each metric has a single value and in the XML file, each metric has a corresponding color coded value.</p>
<fig>
<title>Color-coded XML file</title>
<!--MMO resource relative URI: ../Graphics/colorcoded_default.png-->
<image href="../images/colorcoded_default.png"/>
</fig>
<p>Below is the above XML in a more readable format:</p>
<fig>
<codeblock>&lt;granPeriod duration="PT300S" endTime="2019-02-05T06:55:00+00:00" /&gt;
&lt;repPeriod duration="PT300S" /&gt;
&lt;measType p="1"&gt;diameter_inbound_sum&lt;/measType&gt;
&lt;measType p="2"&gt;diameter_inbound_count&lt;/measType&gt;
&lt;measType p="3"&gt;diameter_inbound_rate&lt;/measType&gt;
&lt;measType p="4"&gt;diameter_inbound_average_latency_overall&lt;/measType&gt;
&lt;measType p="5"&gt;diameter_inbound_average_latency_last_interval&lt;/measType&gt;
&lt;measValue measObjLdn="app=1, dia=1, host=ME-2-diameterapp-0, Application=Gx, Command=CCR, RequestType=INITIAL_REQUEST (1), Result=DIAMETER_SUCCESS, OriginHost=NA, IngressPeerOriginHost=NA, CustomLabel={}"&gt;
	    &lt;r p="1"&gt;1390744&lt;/r&gt;
	    &lt;r p="2"&gt;109246&lt;/r&gt;
	    &lt;r p="3"&gt;2.7228070175438592&lt;/r&gt;
	    &lt;r p="4"&gt;12.73076500430395&lt;/r&gt;
	    &lt;r p="5"&gt;11.13917525773196&lt;/r&gt;
&lt;/measValue&gt;</codeblock>
</fig>
<note>The XML file format was slightly different prior to the SPS 19.3 release. For backward
        compatibility until the connected OSS systems are updated to also support this newer format,
        NCC can be configured to create XML files in the older format. This is for transition
        purposes only. The following is an example measurement from prior (compatibility mode)
        3GPPXML file format:</note>
<fig>
<codeblock>&lt;measData&gt;
manageElement localDn="UHN3tli1smme0001 diameterapp 0" userLabel="UHN3tli1smme0001 diameterapp 0"
 &lt;measInfo&gt;
  &lt;granPeriod duration="PT300S" endTime="2019-02-05T06:55:00+00:00" /&gt;
  &lt;repPeriod duration="PT300S" /&gt;
  &lt;measTypes&gt;diameter_inbound_sum diameter_inbound_count     diameter_inbound_rate diameter_inbound_average_latency_   overall diameter_inbound_average_latency_last_interval&lt;/measTypes&gt;
  &lt;measValue measObjLdn="host=ME2-diameterapp-1, dia=1, a    pp=1, Application=Gx, Command=CCR, CustomLabel={}, Ingr   essPeerOriginHost=NA, IngressPeerOriginRealm=NA, Origin   Host=NA, OriginRealm=NA, RequestType=INITIAL_REQUEST (1   ), Result=DIAMETER_SUCCESS, instance=ME2-diameterapp-1:   9111, job=application_metrics"&gt;
     &lt;measResults&gt;38676622 1903705 9.991666666666667 20.31     6499667753146 14.646371976647206&lt;/measResults&gt;
  &lt;/measValue&gt;
&lt;measInfo&gt;</codeblock>
</fig>
<p>To use the older format, you must configure the following key to be “horizontal” at installation time.</p>
<p>
<userinput>cpro/gen3gppxml/orientation horizontal</userinput>
</p>
<p>See the <i>NCC-Installation and Upgrade Guide</i> for more information about configuring this
        parameter key.</p>
</section>
<section id="csvfiledep"><title>Measurements in CSV files (being deprecated)</title>
<p>The earliest NCC versions did not yet support Prometheus, and instead, gathered metrics into CSV
        files that were stored on the central OAME nodes in each NCC. CSV measurements are still
        supported by NCC for those customers who started on an early NCC version. However, support
        for CSV measurements will be deprecated and no longer supported at some future point. All
        new measurements added into NCC are being added only into Prometheus, with the CSV files
        supporting only those measurements as they existed in the earlier NCC releases. See
          <!--xref URI: #csvbig--><xref href="csvbig.dita"/> for more information about measurements
        in CSV files.</p>
<note>The NCC system can be configured to support both CSV and Prometheus when the metrics mode is
        CSV. When the metrics mode is “csv”, NCC will collect metrics that are already coming in CSV
        and the metrics that are already enabled for Prometheus.</note>
</section>
</conbody></concept>
