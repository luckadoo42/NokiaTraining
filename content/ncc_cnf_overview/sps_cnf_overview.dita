<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="sps_cnf_overview">
    <title>Overview</title>
    <conbody>
        <p>NCC CNF is a cloud-native 5G software solution based on Kubernetes principles, offering
            significant benefits for service providers.</p>
        <section id="section_jvh_b25_klb">
            <title>Characteristics of cloud-native NCC CNF</title>
            <p>The following highlights key features of NCC CNF.</p>
            <ul id="ul_dcl_nvy_jlb">
                <li><b>Cloud-native application</b><ul id="ul_kbd_vb5_klb">
                        <li><b>Infrastructure built around Kubernetes principles</b>
                            <p>NCC uses Docker, containers, Helm charts, and more. </p></li>
                        <li><b>Packaged as lightweight containers</b>
                            <p>Cloud-native applications are a collection of independent and
                                autonomous services, which are packaged as lightweight containers.
                                Unlike virtual machines, containers scale-out and scale-in rapidly.
                                Since the unit of scaling is a lightweight container, infrastructure
                                utilization is optimized.</p></li>
                        <li><b>Dynamic horizontal scaling</b><p>The number of container instances
                                grows and shrinks as needed for handling the varying load. This
                                enables NCC to consume a much lower footprint during typical
                                operating conditions, where the offered traffic is less than the
                                maximum peak dimensioned and when the mate NCC CNF is healthy and
                                processing its own share of traffic. A load balancer runs L7
                                protocols that allows to distribute traffic across the container
                                instances on a request-by-request basis.</p></li>
                        <li><b>Internal protocols are service-mesh friendly</b>
                            <p>Service meshes are powerful tools that add power and flexibility to
                                cloud-native applications. NCC CNF uses Istio that helps provide
                                load balancing, transparent mutual TLS authentication, distributed
                                API call tracing, and more.</p></li>
                        <li><b>Designed as loosely coupled microservices</b>
                            <p>Microservice design allows for breaking up an application into a
                                series of smaller, more specialized parts, each of which
                                communicates with one another across common interfaces such as APIs
                                and REST interfaces like HTTP. A microservice might be provided by a
                                collection of pods working together to provide a service. Services
                                that belong to the same application discover each other through the
                                application runtime, and they exist independent of other services.
                                Microservice design allows for an elastic infrastructure that
                                scales-out with efficiency and high performance.</p></li>
                        <li><b>Consistent with the evolution toward agile DevOps processes</b>
                            <p>Each service of a cloud-native application goes through an
                                independent life cycle, which is managed through an agile DevOps
                                process. Multiple continuous integration and delivery (CI/CD)
                                pipelines work in tandem to deploy and manage a cloud-native
                                application.</p></li>
                    </ul></li>
                <li><b>5G readiness</b><p>NCC is a low-latency application built for 4G and
                    5G.</p></li>
                <li><b>Agility and efficiency</b><p>The flexibility provided by the Nokia Agile Rule
                        Technology (ART) delivers performance efficiency for highly complex
                        real-time use cases.</p></li>
                <li><b>Use of best-in-class industry standard tools</b><p>NCC supports the
                        best-in-class industry standard tools such as Jaeger, Prometheus, Kafka,
                        Elasticsearch, Kibana, Kiali, Istio, Grafana software, and more.</p></li>
                <li><b>Flexible deployment options</b><p>The initial NCC CNF version supports
                        deployment into a customer environment that provides the Kubernetes
                        infrastructure aligned with NCC compatibility. NCC follows standard best
                        practices and is therefore generic and flexible by nature and will be
                        certified for deployment in a wide variety of environments in future
                        versions.</p></li>
                <li>
                    <p>
                        <b>Subscriber model</b></p>
                    <p>The NCC subscriber model provides flexibility in the number of accounts that
                        can be attached to a device.</p>
                </li>
                <li>
                    <p>
                        <b>Focus on groups</b></p>
                    <p>NCC incorporates a group theme, such as family, large enterprise groups, or
                        ad-hoc groups based on rule-based quota allocation algorithms on the Gy
                        interface. The groups are formed for a short period of time to either share
                        a new subscription or share remaining resources on the same account.</p>
                </li>
                <li>
                    <p>
                        <b>In-service updates </b></p>
                    <p> NCC CNF supports in-service software updates leveraging the standard
                        Kubernetes rolling update mechanism. NCC continues servicing traffic while
                        pods are updated one-at-a-time and brought back into service. </p>
                    <note>The initial NCC CNF version does not yet certify the in-service nature of
                        the updates without traffic interruption. Therefore, it is recommended to
                        switch traffic to the other ME in the pair prior to starting the upgrade.
                        The in-service certification feature is coming soon.</note>
                </li>
            </ul>
        </section>
    </conbody>
</concept>
