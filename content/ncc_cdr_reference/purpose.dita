<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id ="d1e8532"><title>Overview</title><conbody>
        <p>A Charging Data Record or Call Detail Record (CDR) is generated as the result of a call
            attempt by a subscriber. The call attempt can be for voice, data, session, SMS, or
            MMS.</p>
        <p>Event Detail Records (EDRs) are generated as a result of an event, for example, lifecycle
            execution. In general, events are planned offline task.</p>
        <p>In NCC, a common CDR framework for both EDR and CDR is used. In this framework, there is
            a recordType tag, which is used to identify the type of record. For example, for EDR
            generated by NCC Lifecycle logic, recordType is <i>LifeCycleRecord</i> while for CDR
            generated for data session call, the <i>recordType</i> is
                <varname>OCSChargingRecord</varname>.</p>
        <p>A CDR is a formatted collection of information about one or more events used in billing
            and accounting systems. A CDR is constructed into a CDR message using the interfaces
            provided by the CDR libraries. The CDR message is sent to Kafka and the CDR daemon
            manages all record data by writing CDR files that follow the 3GPP TS 32.297
            standard.</p>
        <p>The CCDR component includes CDR libraries for the charging and policy application, Kafka
            cluster as the message queue, and CDR daemon processing of the CDR message. Multiple CDR
            daemon nodes are supported. If Policy and Charging are running on the same NCC Host and
            generating a CDR, all CDRs are written to the same single file in the same path. The
            installation of CCDR component is mainly about installation of the CDR daemon node.</p>
        <p>According to telecom billing standards, the CDR messages generated from offline or online
            charging systems are written into CDR files. The CDR files contain a variable length
            file header immediately followed by a variable number of concatenated CDRs.</p>
    </conbody></concept>
