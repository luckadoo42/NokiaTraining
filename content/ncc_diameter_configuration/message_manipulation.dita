<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="id9yz-09126-cn01-tczza-d1e5388"><title>Message Manipulation </title><conbody>
<section><title>Overview</title>
<p>The NCC allows for message manipulation scenarios using Diameter rules and message filters that
                enable you to quickly and easily manipulate most types of Diameter messages. That
                is, the Message Manipulation menu offers the capability to write Diameter rules and
                message validation filters that manipulate generic message processing and facilitate
                the Diameter application/command change between standards-based and pre-standard
                values. Message manipulation is particularly useful when a pre-standards deployment
                may have occurred and the messages in the existing non-standard component need to be
                adapted to inter-operate with a later standards-based component. </p>
<p>You can write Diameter rules or filters to change the standards-based Diameter application and command information in an inbound or outbound Diameter message. The Inbound message manipulation plugin, which is automatically installed, allows you to manipulate a vast variety of Diameter inbound messages using a Diameter rule. The Outbound message manipulation plugin, which is also automatically installed, allows you to manipulate messages, for example GxRAR, RxRAR, and SySLR, to apply an outbound Diameter message using a Diameter rule. </p>
<note>
<p>Diameter message manipulation operations are applied outside of the application’s perspective. If
                    you are influencing the content of a message though message manipulation, you
                    must consider that the message may not be preserved in the context of the
                    session state that is stored in the NCC.</p>
</note>
<p>The following sub-menus are supported under the Message Manipulation menu to allow for adapting Diameter application/command information and controlling generic message processing:</p><ul>
<li>
<p>
<i>Diameter rules</i>: allows you to use the rule editor with the auto-suggest function to author a rule</p>
</li>
<li>
<p>
<i>Message validation</i>: allows you to author a rule in a named message filter without the auto-suggest function; however, with only the appropriate selections being made available</p>
</li>
</ul>
</section>
<section><title>Data type conversion</title>
<p>The <i>CalculatorContext</i> manages the AVP data type and supports data type conversions wherein some of these conversions are implemented through simple assignment and few are exposed as rule action in the <i>CalculatorContext</i>, such as <i>Address-To-UTF8</i> or <i>Enum-To-UTF8</i> data type conversion.</p>
<p>For example:</p>
<fig>
<title>Address-To-UTF8 conversion action</title>
<image href="../images/address-to-utf8_conversion_default.png"/>
</fig>
<fig>
<title>Enum-To-UTF8 converter action</title>
<image href="../images/utf8_converter_action_default.png"/>
</fig>
<p>For more information on various types of actions supported by the <i>CalculatorContext</i>, see the <!--xref URI: #Calculatorcontext--><xref keyref="id9YZ-09126-CN01-TCZZA-d1e9435/Calculatorcontext"/> section in this chapter.</p>
</section>
<section><title>Dictionary of definitions for the AVPs</title>
<p>The NCC provides a dictionary of definitions for the AVPs that can be present in the supported
                Diameter applications. The NCC uses these dictionaries to generate source and result
                contexts to help you build filters and actions. Each Diameter AVP is made available
                as an attribute of the context corresponding to the message type it is contained in.
                For example, Subscription-Id is made available as an attribute of GxCCR, GxxCCR,
                etc. You can write filters to specify the actions that should be performed on the
                Diameter messages and the conditions when these actions should occur. </p>
</section>
<section><title>Diameter rule and message filter construction</title>
<p>The Diameter Rules GUI allows you to author specific rules for Diameter messages. A rule consists of criteria that are matched against the message being processed followed by the actions that are to be taken on a match of criteria.</p>
<p>Message filters provide a way to customize the behavior of a plugin and are based on a simplified version of the rule. In a message filter, a condition is always &lt;context.attribute&gt; &lt;operator&gt; &lt;literal data&gt;, for which only ANDing of conditions is supported. To see the selection available in the SM GUI, click on the context box inside a Diameter rule or message filter criterion and choose a context. Then click on the attribute and choose and attribute. You can then “AND” another criterion in the rule, or choose an action in the same manner.</p>
<p>There are specific classes for each context, but all Diameter messages are implemented using three classes:</p><ul>
<li>
<p>RequestMessageContext </p>
</li>
<li>
<p>AnswerMessageContext</p>
</li>
<li>
<p>MessageContext</p>
</li>
</ul>
<p>There are many contexts that NCC supports out of the box including DiameterRequest and
                DiameterAnswer along with the following for Gy, Gx, Sy, and Rx to name a few:</p><ul>
<li>
<p>CCR</p>
</li>
<li>
<p>CCA</p>
</li>
<li>
<p>RAA</p>
</li>
<li>
<p>RAR</p>
</li>
<li>
<p>ASA</p>
</li>
<li>
<p>ASR</p>
</li>
<li>
<p>etc.</p>
</li>
</ul>
<p>The following is an example of a rule that you could use in a Diameter rule or message filter where <i>Media-Component-Description.Media-Sub-Component.Flow-Description</i> is an attribute of an Rx AAR message context: </p>
<p>
<userinput>Rx AAR.Media-Component-Description.Media-Sub-Component.Flow-Description</userinput>
</p>
<p>There are a number of attributes and actions available in the contexts. Standard actions and additional attributes are available for every AVP, for example:</p><ul>
<li>
<p>attributes such as M-Bit, Number-Of-Values</p>
</li>
<li>
<p>actions such as set, add, remove</p>
</li>
</ul>
<p>All of the attributes and actions are automatically determined and pre-populated according to the context type selected. For example, if you select DiameterRequest as the context, your next choice of attribute or action will be from a list of only those attributes and actions that are available within the DiameterRequest context. </p>
</section>
<section><title>Structure of Diameter AVPs</title>
<p>The structure of the Diameter attributes for Diameter request and answer contexts are defined by the relevant standards document for the given application message type.</p>
<note>For a complete list of standard Attribute Value Pairs (AVPs) for a Diameter command supported
                by the NCC, please refer to the appropriate Technical Standard (TS)
                document.<p/></note>
<p>A Diameter AVP is usually a simple value with a unique identifier that enables the Diameter device to interpret the value. A Diameter message must have at least one AVP. Further, the Diameter protocol also defines the AVP structure for a message. </p>
<p>The following AVP structures are allowed:</p><ul>
<li>
<p>
<b>Simple AVP</b>- The AVP is a simple value, such as, int, string, float, etc.</p>
</li>
<li>
<p>
<b>Grouped AVP</b>- The AVP is a container of a collection of other AVPs, each of which may be simple values or grouped AVPs themselves. For example, in a Rx AAR message, the Media-Component-Description is multi-valued and of type grouped.</p>
</li>
<li>
<p>
<b>Multi-value AVP</b>- The AVP (simple or grouped) appears more than once in the Diameter message. For example, the Flow-Description AVP in a Rx AAR message.</p>
</li>
<li>
<p>
<b>Single-value AVP</b>- The AVP (simple or grouped) appears once in the Diameter message. For example, CC-Request-Type, CC-Request-Number in a Gx CCR message.</p>
</li>
</ul>
</section>
<section><title>Common action types for Diameter AVPs</title>
<p>The NCC provides a set of basic actions/attributes that support the content manipulation of any
                AVP instance in several ways: adding, removing, or moving the AVP. You can also
                modify the content of an AVP. The common action types are specified as part of the
                action attribute name in the <uicontrol>Action Attribute</uicontrol> table for the
                filter. The actions are available across both single-value and multi-value AVP
                structures.</p>
<p>Grouped AVPs have the same actions/attributes as simple AVPs except you can use the presence of a grouped AVP in message filter conditions. However, the value of the AVP cannot be tested.</p>
<p>The table below describes the set of basic actions/attributes that allow you to manipulate Diameter AVPs in a message context. </p>
<table colsep="1" pgwide="0" rowsep="1">
<title>Common action types for AVP content manipulation</title>
<tgroup cols="2" colsep="1">
<colspec colname="1" colnum="1"/>
<colspec colname="2" colnum="2"/>
<thead>
<row>
<entry colname="1">
<p>Action name</p>
</entry>
<entry colname="2">
<p>Purpose</p>
</entry>
</row>
</thead>
<tbody>
<row>
<entry colname="1"> Add </entry>
<entry colname="2">
<p>Allows you to add an AVP if it does not already exist in the
                                    Diameter message.</p>
<p>For example, <i>GxCCR.Origin-State-Id.Add</i> set as
                                        <varname>123456789</varname>.</p>
</entry>
</row>
<row>
<entry colname="1"> Set </entry>
<entry colname="2">
<p>Allows you to set the value of an AVP either by overwriting the
                                    existing value, or by adding the AVP if it does not already
                                    exist in the Diameter message.</p>
<p>For example, <i>GyCCR.Event-Timestamp.Set</i> =
                                        <varname>GyCCR.Service-Information.PS-Information.Start-Time</varname>.</p>
</entry>
</row>
<row>
<entry colname="1"> Remove </entry>
<entry colname="2">
<p>Allows you to remove an AVP from the Diameter message.</p>
<p>For example, <i>Origin-State-Id.Remove</i>.</p>
</entry>
</row>
<row>
<entry colname="1"> Remove-Value </entry>
<entry colname="2">
<p>Allows you to delete the existing value of an AVP from the
                                    Diameter message. </p>
<p> In the case of a single-value AVP, the single value is removed,
                                    leaving the AVP without any value. For example,
                                        <i>Origin-State-Id.Remove-Value</i>.</p>
<p>When you use the action on a multi-value AVP, the value at the
                                    current Write-Index is removed and all subsequent entries are
                                    moved up one position.</p>
</entry>
</row>
<row>
<entry> Append </entry>
<entry> Allows you to append to the value of an AVP. If the AVP doesn't
                                exist yet, this action sets the value of the AVP. This action only
                                applies to string AVPs. </entry>
</row>
<row>
<entry> Prepend </entry>
<entry> Allows you to prepend to the value of an AVP. If the AVP doesn't
                                exist yet, then this action sets the value of the AVP. This action
                                only applies to string AVPs </entry>
</row>
<row>
<entry> Name </entry>
<entry>
<p>Returns the name of the AVP as a string. For use as a parameter
                                    in other Rule Attributes or Actions.</p>
<p>For example, <i>Subscription-Id.Name</i> returns
                                        <varname>Subscription-Id</varname>.</p>
</entry>
</row>
<row>
<entry> Path </entry>
<entry>
<p>Returns the dot separated path of the AVP as a string. For use as
                                    a parameter in other Rule Attributes or Actions.</p>
<p>For example, <i>Subscription-Id.Subscription-Data.Path</i>
                                    returns
                                    <varname>Subscription-Id.Subscription-Data</varname>.</p>
</entry>
</row>
</tbody>
</tgroup>
</table>
</section>
</conbody></concept>